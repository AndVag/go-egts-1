package main

import (
	"encoding/hex"
	"log"

	packet "github.com/LdDl/go-egts/egts/pa—Åket"
)

func readFromBytes() {
	log.Println("Reading from bytes")
	//maxBuffer := make([]byte, 65535)
	request := []byte{1, 0, 0, 11, 0, 133, 9, 1, 0, 1, 155, 36, 0, 1, 0, 149, 192, 37, 3, 0, 188, 214, 138, 16, 2, 2, 16, 24, 0, 188, 214, 138, 16, 94, 61, 100, 154, 123, 147, 195, 68, 139, 111, 0, 94, 0, 0, 0, 0, 0, 132, 0, 0, 0, 6, 0, 26, 1, 0, 10, 2, 0, 36, 0, 2, 0, 149, 192, 37, 3, 0, 191, 214, 138, 16, 2, 2, 16, 24, 0, 191, 214, 138, 16, 94, 61, 100, 154, 51, 166, 195, 68, 139, 172, 0, 86, 0, 0, 0, 0, 0, 132, 0, 0, 0, 6, 0, 26, 1, 0, 10, 2, 0, 36, 0, 3, 0, 149, 192, 37, 3, 0, 202, 214, 138, 16, 2, 2, 16, 24, 0, 202, 214, 138, 16, 149, 67, 100, 154, 196, 240, 195, 68, 139, 112, 0, 76, 0, 0, 0, 0, 0, 130, 0, 0, 0, 6, 0, 26, 1, 0, 10, 2, 0, 36, 0, 4, 0, 149, 192, 37, 3, 0, 207, 214, 138, 16, 2, 2, 16, 24, 0, 207, 214, 138, 16, 30, 83, 100, 154, 144, 251, 195, 68, 139, 94, 128, 101, 0, 0, 0, 0, 0, 131, 0, 0, 0, 6, 0, 26, 1, 0, 10, 2, 0, 46, 0, 5, 0, 149, 192, 37, 3, 0, 211, 214, 138, 16, 2, 2, 19, 7, 0, 3, 2, 0, 0, 0, 0, 0, 16, 24, 0, 211, 214, 138, 16, 57, 86, 100, 154, 144, 251, 195, 68, 139, 7, 128, 102, 0, 0, 0, 0, 10, 128, 0, 0, 0, 6, 0, 26, 1, 0, 10, 2, 0, 36, 0, 6, 0, 149, 192, 37, 3, 0, 112, 216, 138, 16, 2, 2, 16, 24, 0, 112, 216, 138, 16, 75, 117, 100, 154, 22, 250, 195, 68, 139, 109, 0, 7, 0, 0, 0, 0, 0, 126, 0, 0, 0, 6, 0, 26, 5, 0, 4, 2, 0, 36, 0, 7, 0, 149, 192, 37, 3, 0, 117, 216, 138, 16, 2, 2, 16, 24, 0, 117, 216, 138, 16, 239, 135, 100, 154, 144, 251, 195, 68, 139, 37, 0, 12, 0, 0, 0, 0, 0, 129, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 46, 0, 8, 0, 149, 192, 37, 3, 0, 123, 216, 138, 16, 2, 2, 19, 7, 0, 3, 2, 0, 0, 0, 0, 0, 16, 24, 0, 123, 216, 138, 16, 157, 126, 100, 154, 144, 251, 195, 68, 139, 1, 0, 0, 0, 0, 0, 0, 10, 127, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 56, 0, 9, 0, 149, 192, 37, 3, 0, 129, 163, 21, 49, 2, 2, 19, 7, 0, 3, 2, 0, 0, 0, 0, 0, 19, 7, 0, 3, 2, 0, 0, 0, 0, 0, 16, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 64, 0, 0, 0, 0, 0, 10, 1, 0, 0, 0, 6, 0, 26, 30, 0, 15, 2, 0, 36, 0, 10, 0, 149, 192, 37, 3, 0, 244, 237, 138, 16, 2, 2, 16, 24, 0, 244, 237, 138, 16, 57, 86, 100, 154, 223, 243, 195, 68, 139, 22, 128, 53, 0, 0, 0, 0, 0, 127, 0, 0, 0, 6, 0, 26, 2, 0, 5, 2, 0, 36, 0, 11, 0, 149, 192, 37, 3, 0, 8, 238, 138, 16, 2, 2, 16, 24, 0, 8, 238, 138, 16, 139, 95, 100, 154, 77, 0, 196, 68, 139, 1, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 6, 0, 26, 1, 0, 7, 2, 0, 36, 0, 12, 0, 149, 192, 37, 3, 0, 159, 238, 138, 16, 2, 2, 16, 24, 0, 159, 238, 138, 16, 20, 111, 100, 154, 219, 1, 196, 68, 139, 1, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 6, 0, 26, 1, 0, 8, 2, 0, 36, 0, 13, 0, 149, 192, 37, 3, 0, 53, 239, 138, 16, 2, 2, 16, 24, 0, 53, 239, 138, 16, 48, 114, 100, 154, 77, 0, 196, 68, 139, 1, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 14, 0, 149, 192, 37, 3, 0, 125, 239, 138, 16, 2, 2, 16, 24, 0, 125, 239, 138, 16, 167, 98, 100, 154, 17, 8, 196, 68, 139, 46, 0, 131, 0, 0, 0, 0, 0, 124, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 15, 0, 149, 192, 37, 3, 0, 134, 239, 138, 16, 2, 2, 16, 24, 0, 134, 239, 138, 16, 57, 86, 100, 154, 241, 18, 196, 68, 139, 48, 0, 145, 0, 0, 0, 0, 0, 123, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 16, 0, 149, 192, 37, 3, 0, 145, 239, 138, 16, 2, 2, 16, 24, 0, 145, 239, 138, 16, 122, 64, 100, 154, 134, 23, 196, 68, 139, 88, 0, 161, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 17, 0, 149, 192, 37, 3, 0, 149, 239, 138, 16, 2, 2, 16, 24, 0, 149, 239, 138, 16, 40, 55, 100, 154, 8, 36, 196, 68, 139, 61, 0, 83, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 18, 0, 149, 192, 37, 3, 0, 166, 239, 138, 16, 2, 2, 16, 24, 0, 166, 239, 138, 16, 67, 58, 100, 154, 227, 60, 196, 68, 139, 164, 0, 87, 0, 0, 0, 0, 0, 123, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 19, 0, 149, 192, 37, 3, 0, 170, 239, 138, 16, 2, 2, 16, 24, 0, 170, 239, 138, 16, 67, 58, 100, 154, 102, 90, 196, 68, 139, 236, 0, 80, 0, 0, 0, 0, 0, 123, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 20, 0, 149, 192, 37, 3, 0, 172, 239, 138, 16, 2, 2, 16, 24, 0, 172, 239, 138, 16, 149, 67, 100, 154, 152, 110, 196, 68, 139, 45, 1, 58, 0, 0, 0, 0, 0, 123, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 21, 0, 149, 192, 37, 3, 0, 174, 239, 138, 16, 2, 2, 16, 24, 0, 174, 239, 138, 16, 30, 83, 100, 154, 88, 132, 196, 68, 139, 64, 1, 53, 0, 0, 0, 0, 0, 123, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 22, 0, 149, 192, 37, 3, 0, 177, 239, 138, 16, 2, 2, 16, 24, 0, 177, 239, 138, 16, 194, 101, 100, 154, 145, 155, 196, 68, 139, 151, 0, 71, 0, 0, 0, 0, 0, 123, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 23, 0, 149, 192, 37, 3, 0, 181, 239, 138, 16, 2, 2, 16, 24, 0, 181, 239, 138, 16, 20, 111, 100, 154, 140, 169, 196, 68, 139, 86, 0, 12, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 24, 0, 149, 192, 37, 3, 0, 185, 239, 138, 16, 2, 2, 16, 24, 0, 185, 239, 138, 16, 75, 117, 100, 154, 23, 154, 196, 68, 139, 112, 0, 236, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 25, 0, 149, 192, 37, 3, 0, 189, 239, 138, 16, 2, 2, 16, 24, 0, 189, 239, 138, 16, 194, 101, 100, 154, 197, 144, 196, 68, 139, 98, 0, 215, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 26, 0, 149, 192, 37, 3, 0, 192, 239, 138, 16, 2, 2, 16, 24, 0, 192, 239, 138, 16, 85, 89, 100, 154, 88, 132, 196, 68, 139, 160, 0, 232, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 27, 0, 149, 192, 37, 3, 0, 194, 239, 138, 16, 2, 2, 16, 24, 0, 194, 239, 138, 16, 231, 76, 100, 154, 100, 121, 196, 68, 139, 199, 0, 238, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 28, 0, 149, 192, 37, 3, 0, 196, 239, 138, 16, 2, 2, 16, 24, 0, 196, 239, 138, 16, 149, 67, 100, 154, 98, 104, 196, 68, 139, 4, 1, 251, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 29, 0, 149, 192, 37, 3, 0, 198, 239, 138, 16, 2, 2, 16, 24, 0, 198, 239, 138, 16, 122, 64, 100, 154, 20, 81, 196, 68, 139, 77, 129, 5, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 30, 0, 149, 192, 37, 3, 0, 200, 239, 138, 16, 2, 2, 16, 24, 0, 200, 239, 138, 16, 94, 61, 100, 154, 125, 51, 196, 68, 139, 102, 129, 10, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 31, 0, 149, 192, 37, 3, 0, 205, 239, 138, 16, 2, 2, 16, 24, 0, 205, 239, 138, 16, 94, 61, 100, 154, 87, 228, 195, 68, 139, 64, 129, 19, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 32, 0, 149, 192, 37, 3, 0, 207, 239, 138, 16, 2, 2, 16, 24, 0, 207, 239, 138, 16, 122, 64, 100, 154, 178, 209, 195, 68, 139, 175, 128, 21, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 33, 0, 149, 192, 37, 3, 0, 214, 239, 138, 16, 2, 2, 16, 24, 0, 214, 239, 138, 16, 241, 48, 100, 154, 233, 215, 195, 68, 139, 155, 0, 79, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 34, 0, 149, 192, 37, 3, 0, 216, 239, 138, 16, 2, 2, 16, 24, 0, 216, 239, 138, 16, 12, 52, 100, 154, 0, 233, 195, 68, 139, 36, 1, 82, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 35, 0, 149, 192, 37, 3, 0, 218, 239, 138, 16, 2, 2, 16, 24, 0, 218, 239, 138, 16, 40, 55, 100, 154, 132, 6, 196, 68, 139, 128, 1, 81, 0, 0, 0, 0, 0, 122, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 36, 0, 149, 192, 37, 3, 0, 220, 239, 138, 16, 2, 2, 16, 24, 0, 220, 239, 138, 16, 94, 61, 100, 154, 35, 39, 196, 68, 139, 221, 1, 82, 0, 0, 0, 0, 0, 121, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 37, 0, 149, 192, 37, 3, 0, 224, 239, 138, 16, 2, 2, 16, 24, 0, 224, 239, 138, 16, 204, 73, 100, 154, 38, 112, 196, 68, 139, 114, 1, 71, 0, 0, 0, 0, 0, 121, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 38, 0, 149, 192, 37, 3, 0, 226, 239, 138, 16, 2, 2, 16, 24, 0, 226, 239, 138, 16, 30, 83, 100, 154, 115, 135, 196, 68, 139, 238, 0, 80, 0, 0, 0, 0, 0, 121, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 39, 0, 149, 192, 37, 3, 0, 229, 239, 138, 16, 2, 2, 16, 24, 0, 229, 239, 138, 16, 57, 86, 100, 154, 138, 152, 196, 68, 139, 90, 0, 86, 0, 0, 0, 0, 0, 120, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 40, 0, 149, 192, 37, 3, 0, 234, 239, 138, 16, 2, 2, 16, 24, 0, 234, 239, 138, 16, 139, 95, 100, 154, 247, 164, 196, 68, 139, 85, 128, 101, 0, 0, 0, 0, 0, 120, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 41, 0, 149, 192, 37, 3, 0, 238, 239, 138, 16, 2, 2, 16, 24, 0, 238, 239, 138, 16, 222, 104, 100, 154, 252, 150, 196, 68, 139, 105, 128, 9, 0, 0, 0, 0, 0, 120, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 42, 0, 149, 192, 37, 3, 0, 242, 239, 138, 16, 2, 2, 16, 24, 0, 242, 239, 138, 16, 167, 98, 100, 154, 230, 133, 196, 68, 139, 120, 0, 241, 0, 0, 0, 0, 0, 120, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 43, 0, 149, 192, 37, 3, 0, 245, 239, 138, 16, 2, 2, 16, 24, 0, 245, 239, 138, 16, 85, 89, 100, 154, 207, 116, 196, 68, 139, 186, 0, 247, 0, 0, 0, 0, 0, 120, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 44, 0, 149, 192, 37, 3, 0, 248, 239, 138, 16, 2, 2, 16, 24, 0, 248, 239, 138, 16, 231, 76, 100, 154, 244, 91, 196, 68, 139, 247, 0, 251, 0, 0, 0, 0, 0, 120, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 45, 0, 149, 192, 37, 3, 0, 250, 239, 138, 16, 2, 2, 16, 24, 0, 250, 239, 138, 16, 177, 70, 100, 154, 53, 70, 196, 68, 139, 28, 129, 8, 0, 0, 0, 0, 0, 120, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 46, 0, 149, 192, 37, 3, 0, 253, 239, 138, 16, 2, 2, 16, 24, 0, 253, 239, 138, 16, 177, 70, 100, 154, 35, 39, 196, 68, 139, 8, 129, 13, 0, 0, 0, 0, 0, 120, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 36, 0, 47, 0, 149, 192, 37, 3, 0, 0, 240, 138, 16, 2, 2, 16, 24, 0, 0, 240, 138, 16, 177, 70, 100, 154, 139, 9, 196, 68, 139, 207, 128, 19, 0, 0, 0, 0, 0, 120, 0, 0, 0, 6, 0, 26, 1, 0, 9, 2, 0, 90, 90}
	// data := maxBuffer[:len(request)]
	_, responseCode := packet.ReadPacket(request)
	log.Println("Code error:", responseCode)
	// TODO
}

func readFromStringHEX() {
	log.Println("Reading from string (HEX)")

	hexStrings := []string{
		"0100000B0022000100010c170001000196933831010101140096933831023836353930353032343632343131300397",             // auth
		"0100000B0022000100010c1700010001539ffc300101011400539ffc3002383631373835303037323332353736ccff",             // auth
		"0100000B0022000100010c170001000145e71631010101140045e7163102383633353931303236303238373831da25",             // auth
		"0100000B0022000100010c170001000143e71631010101140043e7163102383633353931303233373034393339c266",             // auth
		"0100000B0022000100010c1700010001549ffc300101011400549ffc3002383631373835303038333738303036a6d9",             // auth
		"0100000b0028000200016f1d00020001808c03000202101a0002b0d00f3aae5e9a1e7db24481cc017c00000000107800000000a7e0", // telematic data
		"0100000B002800030001291D00030001808c03000202101A008baed00f8c19609a8038a8448100000000000000107800000000c50d", // telematic data
	}

	for i := range hexStrings {
		maxBuffer := make([]byte, 0, 65535)
		maxBuffer, err := hex.DecodeString(hexStrings[i])
		if err != nil {
			log.Println("Skipping this iteration due the error:", err, hexStrings[i])
		}
		p, responseCode := packet.ReadPacket(maxBuffer)
		log.Println("Code error:", responseCode)
		log.Println(maxBuffer, p)
	}
}

func readFromFile() {
	log.Println("Reading from file")
	maxBuffer := make([]byte, 65535)
	_ = maxBuffer
	// TODO
}

func main() {
	// readFromBytes()
	readFromStringHEX()
	//readFromFile()
}
